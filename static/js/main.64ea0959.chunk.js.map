{"version":3,"sources":["todo.svg","delete.svg","success.svg","verified.svg","plus.svg","Todo.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","domnode","React","createRef","nextProps","item","text","this","current","innerHTML","props","done","className","contentEditable","ref","dangerouslySetInnerHTML","__html","onInput","event","handleChange","id","target","onClick","removeItem","src","del","alt","toggleItem","success","verify","Component","Add","add","App","setState","todos","Date","getTime","state","localStorage","setItem","JSON","stringify","prevProps","map","filter","parse","getItem","todo","length","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64ea0959.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/todo.03539d13.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.39b6b69a.svg\";","module.exports = __webpack_public_path__ + \"static/media/success.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/verified.7a0423bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.311313cd.svg\";","import React from 'react';\r\nimport './common.css';\r\nimport del from './delete.svg';\r\nimport success from './success.svg';\r\nimport verify from './verified.svg';\r\n\r\nclass Todo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.domnode = React.createRef();\r\n  }\r\n  shouldComponentUpdate(nextProps){\r\n    return nextProps.item.text !== this.domnode.current.innerHTML || this.props.item.done !== nextProps.item.done;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"task\">\r\n        <div className=\"input\" contentEditable=\"true\" ref={this.domnode} dangerouslySetInnerHTML={{__html: this.props.item.text}} onInput={(event) => this.props.handleChange(this.props.item.id, event.target.innerHTML)}>\r\n        </div>\r\n        <div className=\"delete\" onClick={() => this.props.removeItem(this.props.item.id)}>\r\n          <img src={del} alt=\"delete\" className=\"del\" />\r\n        </div>\r\n        <div className=\"success\" onClick={() => this.props.toggleItem(this.props.item.id)}>\r\n          <img src={this.props.item.done ? success : verify} alt=\"checked\" className=\"successicon\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport './common.css';\r\nimport add from './plus.svg';\r\n\r\nclass Add extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"addButton\" onClick={() => this.props.add()}>\r\n        <img src={add} alt=\"add\" className=\"add\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Add;","import React from 'react';\nimport './common.css';\nimport todo from './todo.svg';\nimport Todo from './Todo';\nimport Add from './Add';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: JSON.parse(localStorage.getItem('todos') || JSON.stringify([]))\n    };\n  }\n\n  add = () => {\n    this.setState({\n      todos: [{ id: new Date().getTime(), text: '', done: false }, ...this.state.todos]\n    }, () => {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    });\n  }\n\n  toggleItem = (id) => {\n    this.setState((prevProps) => {\n      return {\n        todos: prevProps.todos.map((item) => {\n          if (item.id === id) {\n            return { ...item, done: !item.done };\n          }\n          return item;\n        })\n      };\n    }, () => {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    })\n  }\n\n  removeItem = (id) => {\n    this.setState((prevProps) => {\n      return {\n        todos: prevProps.todos.filter((item) => item.id !== id)\n      };\n    }, () => {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    })\n  }\n\n  handleChange = (id, text = '') => {\n    this.setState((prevProps) => {\n      return {\n        todos: prevProps.todos.map((item) => {\n          if (item.id === id) {\n            return { ...item, text: text};\n          }\n          return item;\n        })\n      };\n    }, () => {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"background\">\n        <div className=\"header\">\n          <img src={todo} className=\"logo\" alt=\"todo\"></img>\n          <span className=\"title\">TODO Offline App</span>\n        </div>\n        {\n          this.state.todos.length === 0 ? (<h3>No Items Enjoy your day!</h3>) : this.state.todos.map((item) => {\n            return (\n              <div className=\"content paper\" key={item.id}>\n                <Todo item={item} toggleItem={this.toggleItem} removeItem={this.removeItem} handleChange={this.handleChange} />\n              </div>\n            );\n          })\n\n        }\n        <Add add={this.add} />\n        <div className=\"footer\">\n          TODO application offline....\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}